#!/bin/bash

RPMBUILD=$HOME/rpmbuild

function fail {
	echo Failure: $1;
	exit 1;
}

function fetch_variable {
	grep -i ^$1 $SPECFILE |awk '{print $2;}'	
}

function help {
	EXECNAME=`basename $0`
	echo "Locally build RPMs from a OSC tree."
	echo 
	echo "$EXECNAME [--init | --cleanup] [--skip-rpmlint] rpmbuild-parameters specfile"
	echo 
	echo "--init        : initialize rpmbuild tree at $RPMBUILD"
	echo "--cleanup     : remove the rpmbuild tree at $RPMBUILD"
	echo "--skip-rpmlint: skip rpmlint before rpmbuild"
	exit;
}
function init {
	if ! [ -x `which rpmbuild` ]; then
		fail "rpmbuild not found, install rpmbuild"
	fi;
	mkdir -p $RPMBUILD
	mkdir -p $RPMBUILD/RPMS
	mkdir -p $RPMBUILD/BUILD
	mkdir -p $RPMBUILD/SRPMS
	mkdir -p $RPMBUILD/SOURCES
	mkdir -p $RPMBUILD/SPECS
cat > $HOME/.rpmmacros <<EOF
%_topdir $RPMBUILD
%_smp_mflags  -j3
%__arch_install_post   /usr/lib/rpm/check-rpaths   /usr/lib/rpm/check-buildroot
EOF
	find $RPMBUILD -type d
	cat $HOME/.rpmmacros
	exit;
}
function cleanup {
	rm -f $HOME/.rpmmacros
	rm -rf $RPMBUILD
	exit;
}

function check_rpmbuild {
	if ! [ -d $RPMBUILD ]; then
		ERR="$RPMBUILD not found, try --init"
	fi;
	if ! [ -f $HOME/.rpmmacros ]; then 
		ERR="$HOME/.rpmmacros not found, try --init"
	fi;
	if ! [ -x `which rpmbuild` ]; then
		ERR="rpmbuild not found"
	fi;
	if ! [ -x `which rpmlint` ]; then 
		ERR="rpmlint not found"
	fi;
	if [ "x$ERR" != x ]; then
		fail "$ERR";
	fi;
}
ARGS=
for parameter in $*; do
if echo $parameter | grep '.spec$' ; then
	SPECFILE=$parameter
	ARGS="$ARGS $parameter"
else
case "x$parameter" in
	x--skip-rpmlint | x-S )
	SKIPRPMLINT=yes ;;
	x--init | x-I )
	INIT=yes ;;
	x--cleanup | x-C )
	CLEANUP=yes ;;
	x--help | x-h )
	HELP=yes ;;
	*)
	ARGS="$ARGS $parameter";;
esac 
fi;
done;

if [ "x$HELP" == "xyes" ]; then
	help;
fi;

if [ "x$INIT" == "xyes" ]; then
	init
fi;

if [ "x$CLEANUP" == "xyes" ]; then
	cleanup
fi;

check_rpmbuild

if [ "x$SPECFILE" == "x" ]; then
	fail "SPECFILE is not specified.";
fi


if ! [ -f $SPECFILE ]; then
	fail "$SPECFILE doesnt exist.";
fi;

[ "x$SKIPRPMLINT" != "xyes" ] &&
if rpmlint $SPECFILE | grep "E:" ; then
	fail "$SPECFILE is broken.";
fi;

TMP=`mktemp /tmp/tmpXXXXXX`

version=`fetch_variable Version`
name=`fetch_variable Name`

grep -i -e '^Source.*' -e '^Patch.*' $SPECFILE |
sed -e "s;%{version};$version;" \
    -e "s;%{name};$name;" \
 > $TMP
for file in * ; do
if grep -e $file $TMP > /dev/null; then
	echo $file is a source file, copy to $RPMBUILD/SOURCES
	mkdir -p $RPMBUILD/SOURCES
	cp $file $RPMBUILD/SOURCES
fi;
done;

rm $TMP
echo args = $ARGS
rpmbuild $ARGS > $TMP
for file in `grep "^Wrote" $TMP | awk '{print $2;}'`; do
	echo $file is created and moved to current directory
	mv $file .
done
echo DONE


